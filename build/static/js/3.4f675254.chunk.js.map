{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","validationError","ValidationError","valueType","label","module","exports","Label","Auth","state","controls","email","type","placeholder","validation","required","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","D_Github_react_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","onAuth","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.4f675254.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport classes from './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>; \r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textselectarea'):\r\n            inputElement = (\r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={props.value}\r\n                    onChange={props.changed} >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option \r\n                            key={option.value}\r\n                            value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;    \r\n        default:\r\n            inputElement = <input \r\n                className={classes.Input}\r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }   \r\n\r\n    let validationError = null;\r\n    if (props.invalid && props.touched) {\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid {props.valueType}</p>;\r\n    }\r\n    return (\r\n    <div className={classes.Input}>\r\n        <label className={classes.label}>{props.label}</label>\r\n        {inputElement}\r\n        {validationError}\r\n    </div>\r\n)};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__1VROp\",\"Label\":\"Input__Label__1tOSX\",\"InputElement\":\"Input__InputElement__3TB0k\",\"Invalid\":\"Input__Invalid__38X2d\",\"ValidationError\":\"Input__ValidationError__ukId8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__1TInt\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                minLength: 6,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    };\r\n\r\n    // check if user is building a burger and if not redirect to burgerbuilder after auth\r\n    componentDidMount () {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    // Creates an updated form where the elements are updated to handle input and changes\r\n    // Changes to the form inputs should update the local component state\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName]),\r\n                touched: true\r\n            } )\r\n        });\r\n        this.setState({controls: updatedControls})\r\n    };\r\n\r\n    // Switches Authentication for the user to sign up or sign in\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignup: !prevState.isSignup};\r\n        })\r\n        // this.setState({isSignup: !this.state.isSignup})\r\n    };\r\n\r\n    // Handles the form submission\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        // console.log('isSignup value before', this.state.isSignup)\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    };\r\n\r\n    render () {\r\n\r\n        // Iterate over each key in state.orderform and push a javascript object to formElementsArray\r\n        // Each JavaScript Object should contain an id (the key being iterated) and a config (the value of the key being iterated)\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        // Iterate over the formElementsArray and\r\n        // Set a static form variable as a dynamically generated set of Input elements\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                valueType={formElement.id}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n        ));\r\n\r\n        // Shows a spinner when state.loading is true\r\n        if (this.props.loading){\r\n            form = <Spinner />;\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if (this.props.error){\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        // Return the form variable within a form element wrapped in a div\r\n        // Add a Submit Button element below the form variable but within the HTML form element\r\n        return (\r\n            <div className={classes.Auth}>\r\n            {authRedirect}\r\n            {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button\r\n                    btnType=\"Success\" clicked={this.submitHandler}>SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}