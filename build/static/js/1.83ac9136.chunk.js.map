{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","validationError","ValidationError","valueType","label","module","exports","Label","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputIdentifier","updatedFormElement","updateObject","this","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","formElementsArray","id","config","form","onSubmit","formElement","inputChangedHandler","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","toppings","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GA+DeE,IA3DD,SAACC,GACX,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAM9B,OAJGJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAC9CL,EAAaM,KAAKL,IAAQM,SAGtBT,EAAMU,aACV,IAAM,QACFT,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACXC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WACpB,MACJ,IAAM,WACFnB,EAAeN,EAAAgB,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CACXC,UAAWb,EAAac,KAAK,MACzBhB,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WACpB,MACJ,IAAM,iBACFnB,EACIN,EAAAgB,EAAAC,cAAA,UACIG,UAAWb,EAAac,KAAK,KAC7BE,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,SACfpB,EAAMiB,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACnC5B,EAAAgB,EAAAC,cAAA,UACIY,IAAKD,EAAOL,MACZA,MAAOK,EAAOL,OACbK,EAAOE,iBAKxB,MACJ,QACIxB,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CACXC,UAAWZ,IAAQuB,OACf1B,EAAMiB,cAFC,CAGXC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WAG5B,IAAIO,EAAkB,KAItB,OAHI3B,EAAMK,SAAWL,EAAMO,UACvBoB,EAAkBhC,EAAAgB,EAAAC,cAAA,KAAGG,UAAWZ,IAAQyB,iBAAtB,wBAA6D5B,EAAM6B,YAGzFlC,EAAAgB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQuB,OACpB/B,EAAAgB,EAAAC,cAAA,SAAOG,UAAWZ,IAAQ2B,OAAQ9B,EAAM8B,OACvC7B,EACA0B,yBC1DTI,EAAAC,QAAA,CAAkBN,MAAA,sBAAAO,MAAA,sBAAA7B,aAAA,6BAAAK,QAAA,wBAAAmB,gBAAA,sDCAlBG,EAAAC,QAAA,CAAkBE,gBAAA,gECAlBH,EAAAC,QAAA,CAAkBG,YAAA,8LCsBHC,EAjBS,SAACpC,GACrB,OACIqC,EAAA1B,EAAAC,cAAA,OAAKG,UAAWZ,IAAQ+B,iBACpBG,EAAA1B,EAAAC,cAAA,qCACAyB,EAAA1B,EAAAC,cAAA,OAAK0B,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChCH,EAAA1B,EAAAC,cAAC6B,EAAA,EAAD,CAAQC,YAAa1C,EAAM0C,eAE/BL,EAAA1B,EAAAC,cAAC+B,EAAA,EAAD,CACIC,QAAQ,SACRC,QAAS7C,EAAM8C,mBAFnB,UAGAT,EAAA1B,EAAAC,cAAC+B,EAAA,EAAD,CACIC,QAAQ,UACRC,QAAS7C,EAAM+C,mBAFnB,wFCHNZ,6MACFa,MAAQ,CACJC,UAAW,CACHC,KAAM,CACFxC,YAAa,QACbO,cAAe,CACXkC,KAAM,OACNC,YAAa,aAEjBlC,MAAO,GACPX,SAAS,EACT8C,WAAY,CACRC,UAAU,GAEdC,OAAO,GAEXC,OAAQ,CACJ9C,YAAa,QACbO,cAAe,CACXkC,KAAM,OACNC,YAAa,UAEjBlC,MAAO,GACPX,SAAS,EACT8C,WAAY,CACRC,UAAU,GAEdC,OAAO,GAEXE,QAAS,CACL/C,YAAa,QACbO,cAAe,CACXkC,KAAM,OACNC,YAAa,YAEjBlC,MAAO,GACPX,SAAS,EACT8C,WAAY,CACRC,UAAU,EACVI,UAAW,EACXC,UAAW,GAEfJ,OAAO,GAEXK,QAAS,CACLlD,YAAa,QACbO,cAAe,CACXkC,KAAM,OACNC,YAAa,WAEjBlC,MAAO,GACPX,SAAS,EACT8C,WAAY,CACRC,UAAU,GAEdC,OAAO,GAEXM,MAAO,CACHnD,YAAa,QACbO,cAAe,CACXkC,KAAM,QACNC,YAAa,eAEjBlC,MAAO,GACPX,SAAS,EACT8C,WAAY,CACRC,UAAU,GAEdC,OAAO,GAEXO,eAAgB,CACZpD,YAAa,iBACbO,cAAe,CACXI,QAAS,CACL,CAACH,MAAO,UAAWO,aAAc,WACjC,CAACP,MAAO,WAAYO,aAAc,cAG1CP,MAAO,UACPmC,WAAY,GACZE,OAAO,IAGnBQ,aAAa,KAGjBC,aAAe,SAAEC,GACbA,EAAMC,iBAIN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyBC,EAAKrB,MAAMC,UACzCkB,EAASC,GAAyBC,EAAKrB,MAAMC,UAAUmB,GAAuBlD,MAGlF,IAAMoD,EAAQ,CACV5B,YAAa2B,EAAKrE,MAAMuE,KACxBC,MAAOH,EAAKrE,MAAMwE,MAClBC,UAAWN,EACXO,OAAQL,EAAKrE,MAAM0E,QAGvBL,EAAKrE,MAAM2E,cAAcL,EAAOD,EAAKrE,MAAM4E,2FAI1BX,EAAOY,GACxB,IAAMC,EAAqBC,YAAaC,KAAKhC,MAAMC,UAAU4B,GAAiB,CAC1E3D,MAAO+C,EAAMgB,OAAO/D,MACpBqC,MAAO2B,YAAcjB,EAAMgB,OAAO/D,MAAO8D,KAAKhC,MAAMC,UAAU4B,GAAiBxB,YAC/E9C,SAAS,IAGP4E,EAAmBJ,YAAaC,KAAKhC,MAAMC,UAAZpC,OAAAuE,EAAA,EAAAvE,CAAA,GAChCgE,EAAkBC,IAGnBf,GAAc,EAClB,IAAI,IAAIc,KAAmBM,EACvBpB,EAAcoB,EAAiBN,GAAiBtB,OAASQ,EAG7DiB,KAAKK,SAAS,CAACpC,UAAWkC,EAAkBpB,YAAaA,qCAGnD,IAAAuB,EAAAN,KACAO,EAAoB,GAC1B,IAAK,IAAI/D,KAAOwD,KAAKhC,MAAMC,UACvBsC,EAAkB/E,KAAK,CACnBgF,GAAIhE,EACJiE,OAAQT,KAAKhC,MAAMC,UAAUzB,KAGrC,IAAIkE,EACIrD,EAAA1B,EAAAC,cAAA,QAAM+E,SAAUX,KAAKhB,cAChBuB,EAAkBjE,IAAI,SAAAsE,GAAW,OAC9BvD,EAAA1B,EAAAC,cAACc,EAAA,EAAD,CACIF,IAAKoE,EAAYJ,GACjB9E,YAAakF,EAAYH,OAAO/E,YAChCO,cAAe2E,EAAYH,OAAOxE,cAClCC,MAAO0E,EAAYH,OAAOvE,MAC1BW,UAAW+D,EAAYJ,GACvBnF,SAAUuF,EAAYH,OAAOlC,MAC7BjD,eAAgBsF,EAAYH,OAAOpC,WACnCjC,QAAS,SAAC6C,GAAD,OAAWqB,EAAKO,oBAAoB5B,EAAO2B,EAAYJ,KAChEjF,QAASqF,EAAYH,OAAOlF,YAEpC8B,EAAA1B,EAAAC,cAAC+B,EAAA,EAAD,CAAQC,QAAQ,UAAUkD,UAAWd,KAAKhC,MAAMe,YAAalB,QAASmC,KAAKhB,cAA3E,UAMZ,OAHIgB,KAAKhF,MAAM+F,UACXL,EAAOrD,EAAA1B,EAAAC,cAACoF,EAAA,EAAD,OAGP3D,EAAA1B,EAAAC,cAAA,OAAKG,UAAWZ,IAAQgC,aACpBE,EAAA1B,EAAAC,cAAA,qCACC8E,UA7JSO,aAmLXC,cAhBS,SAAAlD,GACpB,MAAO,CACHuB,KAAMvB,EAAMmD,cAAczD,YAC1B8B,MAAOxB,EAAMmD,cAAcC,WAC3BL,QAAS/C,EAAMsB,MAAMyB,QACrBnB,MAAO5B,EAAMqD,KAAKzB,MAClBF,OAAQ1B,EAAMqD,KAAK3B,SAIA,SAAA4B,GACvB,MAAO,CACH3B,cAAe,SAACF,EAAWG,GAAZ,OAAsB0B,EAASC,IAAuB9B,EAAWG,OAIzEsB,CAA4CM,YAAiBrE,EAAasE,MCzLnFC,6MAEFC,yBAA2B,WACvBtC,EAAKrE,MAAM4G,QAAQC,YAGvBC,yBAA2B,WACvBzC,EAAKrE,MAAM4G,QAAQG,QAAQ,mGAI3B,IAAIC,EAAU3E,EAAA1B,EAAAC,cAACqG,EAAA,EAAD,CAAUC,GAAG,MAC3B,GAAIlC,KAAKhF,MAAMmH,SAAS,CACpB,IAAMC,EAAoBpC,KAAKhF,MAAMqH,UAAYhF,EAAA1B,EAAAC,cAACqG,EAAA,EAAD,CAAUC,GAAG,MAAS,KACvEF,EACI3E,EAAA1B,EAAAC,cAAA,WACKwG,EACD/E,EAAA1B,EAAAC,cAAC0G,EAAD,CACI5E,YAAasC,KAAKhF,MAAMmH,SACxBrE,kBAAmBkC,KAAK2B,yBACxB5D,kBAAmBiC,KAAK8B,2BAC5BzE,EAAA1B,EAAAC,cAAC2G,EAAA,EAAD,CACIC,KAAMxC,KAAKhF,MAAMyH,MAAMD,KAAO,gBAC9BE,UAAWvF,KAI3B,OAAO6E,SA3BQf,aAsCRC,sBAPS,SAAAlD,GACpB,MAAO,CACHmE,SAAUnE,EAAMmD,cAAczD,YAC9B2E,UAAWrE,EAAMsB,MAAM+C,YAIhBnB,CAAyBQ","file":"static/js/1.83ac9136.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport classes from './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>; \r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textselectarea'):\r\n            inputElement = (\r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={props.value}\r\n                    onChange={props.changed} >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option \r\n                            key={option.value}\r\n                            value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;    \r\n        default:\r\n            inputElement = <input \r\n                className={classes.Input}\r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }   \r\n\r\n    let validationError = null;\r\n    if (props.invalid && props.touched) {\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid {props.valueType}</p>;\r\n    }\r\n    return (\r\n    <div className={classes.Input}>\r\n        <label className={classes.label}>{props.label}</label>\r\n        {inputElement}\r\n        {validationError}\r\n    </div>\r\n)};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__1VROp\",\"Label\":\"Input__Label__1tOSX\",\"InputElement\":\"Input__InputElement__3TB0k\",\"Invalid\":\"Input__Invalid__38X2d\",\"ValidationError\":\"Input__ValidationError__ukId8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__-avOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1whvJ\"};","import React from 'react'\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport axios from '../../../axios-orders';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.css';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Your Name'\r\n                    },\r\n                    value: '',\r\n                    touched: false,\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false\r\n                },\r\n                street: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Street'\r\n                    },\r\n                    value: '',\r\n                    touched: false,\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false\r\n                },\r\n                zipCode: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'ZIP Code'\r\n                    },\r\n                    value: '',\r\n                    touched: false,\r\n                    validation: {\r\n                        required: true,\r\n                        minLength: 5,\r\n                        maxLength: 5\r\n                    },\r\n                    valid: false\r\n                },\r\n                country: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Country'\r\n                    },\r\n                    value: '',\r\n                    touched: false,\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false\r\n                },\r\n                email: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'email',\r\n                        placeholder: 'Your E-Mail'\r\n                    },\r\n                    value: '',\r\n                    touched: false,\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false\r\n                },\r\n                deliveryMethod: {\r\n                    elementType: 'textselectarea',\r\n                    elementConfig: {\r\n                        options: [\r\n                            {value: 'fastest', displayValue: 'Fastest'},\r\n                            {value: 'cheapest', displayValue: 'Cheapest'}\r\n                        ]\r\n                    },\r\n                    value: 'fastest',\r\n                    validation: {},\r\n                    valid: true\r\n                },\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = ( event ) => {\r\n        event.preventDefault();\r\n\r\n\r\n        // Set formData as a new object with keyvalue pairs\r\n        const formData = {}\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n\r\n    }\r\n\r\n    inputChangedHandler (event, inputIdentifier) {\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n\r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n                <form onSubmit={this.orderHandler}>\r\n                    {formElementsArray.map(formElement => (\r\n                        <Input \r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType} \r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            valueType={formElement.id}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                            touched={formElement.config.touched}/>\r\n                    ))}\r\n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid} clicked={this.orderHandler}>ORDER</Button>\r\n                </form>\r\n        );\r\n        if (this.props.loading){\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading, \r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from '../Checkout/ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\"/>;\r\n        if (this.props.toppings){\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.toppings} \r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route \r\n                        path={this.props.match.path + '/contact-data'} \r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        toppings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}